services:
  # Dependencies
  dependencies:
    build:
      context: .
      dockerfile: dependencies.Dockerfile
    image: gobuild-dependencies:latest

  # Kafka for messaging
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
      ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL: ERROR
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      timeout: 5s
      retries: 5


  kafka-init:
    build:
      context: ./kafka-init
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "kafka-topics --list --bootstrap-server kafka:29092 | grep -q 'build-requests'" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Redis for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend services
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  build-orchestrator:
    build:
      context: .
      dockerfile: build-orchestrator/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  builder:
    build:
      context: .
      dockerfile: builder/Dockerfile
    environment:
      - PORT=8083
      - STORAGE_URL=http://storage:8084
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    deploy:
      replicas: 2
    volumes:
      - build-work:/app/work

  storage:
    build:
      context: .
      dockerfile: storage/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
    volumes:
      - build-artifacts:/app/artifacts
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  notification:
    build:
      context: .
      dockerfile: notification/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  status-dashboard-api:
    build:
      context: .
      dockerfile: status-dashboard-api/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - PORT=8086
    depends_on:
      dependencies:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  # Frontend
  status-dashboard-ui:
    build: ./status-dashboard-ui
    ports:
      - "3000:3000"
    depends_on:
      - status-dashboard-api

volumes:
  build-artifacts:
  build-work:
  redis-data: