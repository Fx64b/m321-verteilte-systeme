services:
  # Kafka for messaging
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend services
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  build-orchestrator:
    build: ./build-orchestrator
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  builder:
    build: ./builder
    environment:
      - PORT=8082
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2  # Run multiple builder instances for concurrency

  storage:
    build: ./storage
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
    volumes:
      - build-artifacts:/app/artifacts  # Persistent volume for build artifacts
    depends_on:
      kafka:
        condition: service_healthy

  notification:
    build: ./notification
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
    depends_on:
      kafka:
        condition: service_healthy

  status-dashboard-api:
    build: ./status-dashboard-api
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
    depends_on:
      kafka:
        condition: service_healthy

  # Frontend
  status-dashboard-ui:
    build: ./status-dashboard-ui
    ports:
      - "3000:3000"
    depends_on:
      - status-dashboard-api

volumes:
  build-artifacts: